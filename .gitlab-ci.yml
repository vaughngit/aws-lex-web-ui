variables:
  #AWS_REGION: us-east-2
stages:
- assume-role-dev
- build-test
#- deploy-dev
#- deploy-prod
assume-role-dev-env:
  stage: assume-role-dev
  image: 
    name: amazon/aws-cli:latest
    entrypoint: [""]
  id_tokens:   # This key indicates the beginning of the section where the ID tokens generated by GitLab are defined
    GITLAB_OIDC_TOKEN: #An arbitrary name assigned to the OIDC token that GitLab generates. It is used as an environment variable within the CICD pipeline to access the token's value. 
      aud: aws-oidc-demo #The audience (aud) for the token. Identifies the intended recipient of the token and specifies that the token is intended for use with the AWS identity provider configured to recognize aws-oidc-demo as a trusted audience.
  
  before_script: #prep the environment 
    - mkdir -p ~/.aws # create a directory named .aws in the home directory of the current user (~). 
    # Use the -p swtich to ensure that the command does not produce an error if the directory already exists 
    - echo "${GITLAB_OIDC_TOKEN}" > /tmp/web_identity_token # This command takes the value of the environment variable GITLAB_OIDC_TOKEN, which contains an OIDC token generated by GitLab for the current job,( which is used for secure authentication with AWS, without the need for static long-term AWS credentials), and writes it to a file named web_identity_token in the /tmp directory.
    - echo -e "[profile oidc]\nrole_arn=${ROLE_ARN}\nweb_identity_token_file=/tmp/web_identity_token" > ~/.aws/config # This command creates the (~/.aws/config) file with a new profile named oidc, which enables the AWS CLI to use the OIDC token for authentication by specifying the role ARN to assume and the file where the OIDC token is stored ie (/tmp/web_identity_token). The -e option in the echo command enables interpretation of backslash escapes like \n which is used to insert new lines, thus structuring the file content correctly. The role_arn variable (${ROLE_ARN}) refers to variable created and stored in the Settings -> CI/CD -> Variables section of GitLab. This is the role configured in AWS to trust the GitLab OIDC provider configured in the AWS Identity Provider in IAM, which allows GitLab to assume that role. The web_identity_token_file specifies the path to the token file created in the previous step, informing AWS CLI where to find the token for authentication.
  script:
    - >
      export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token ${GITLAB_OIDC_TOKEN}
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    #- aws sts get-caller-identity
    - >
      export AWS_ACCOUNT_ID=$(aws sts get-caller-identity
      --query 'Account'
      --output text)
    - echo $AWS_ACCOUNT_ID
    - echo $AWS_REGION
    - echo "AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}" >> build.env
    - echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> build.env
    - echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> build.env
    - echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> build.env
    #- aws s3 ls
    #- aws ec2 describe-instances
  artifacts:
    paths:
      - build.env

build-job:
  stage: build-test
  image: node:20
  dependencies:
    - assume-role-dev-env
  cache:
    paths:
    - node_modules/
  script:
  - source build.env
  - echo "Preforming build test on the code with AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}..."
  # - echo $AWS_ACCOUNT_ID
  # - echo $AWS_REGION
  # - echo $AWS_ACCESS_KEY_ID
  # - echo $CDK_DEFAULT_ACCOUNT
  # - echo $CDK_DEFAULT_REGION
  - export CDK_DEFAULT_ACCOUNT=$AWS_ACCOUNT_ID
  - export CDK_DEFAULT_REGION=$AWS_REGION
  - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
  - echo "Compiling the code..."
  - npm install
  - npm run build
  #- npx cdk synth --output cdk.out
  #- ls -aR
  - echo "Compile complete."
  # artifacts:
  #   paths:
  #     - cdk.out/
  #   expire_in: 1 hour

# deploy-dev-env:
#   stage: deploy-dev
#   image: node:20
#   dependencies:
#     - assume-role-dev-env
#     #- build-job
#   cache:
#     paths:
#     - node_modules/
#   script:
#   - source build.env
#   #- export CDK_DEFAULT_ACCOUNT=$AWS_ACCOUNT_ID
#   #- export CDK_DEFAULT_REGION=$AWS_REGION
#   - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
#   - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
#   - export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
#   - echo "Deploying the code..."
#   - npx cdk deploy --require-approval never
#   - echo "Deployment complete."


  

